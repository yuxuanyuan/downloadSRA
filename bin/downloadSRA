#!/bin/bash

# This script aims to help download SRA files
# ScriptName: downdloadSRA
# Created date: 19-Jul-2019
# Last modified: 28-Nov-2020
# Note: v1.0 is the initial version
#       v1.01 check the bad link and try to download from 'sra-download.ncbi.nlm.nih.gov'
#       v1.02 add the fastq-dump function 
#       v1.03 fix the ascp link error   
# Copyright: Copyright (c) 2020 Yuxuan Yuan (yuxuan.yuan@outlook.com)

####      #### ####      ####  #####         #####  ####      ####        #####          #####       ###
 #  #    #  #  #  #      #  #   #  #        #   #   #  #      #  #       # # # #         # # ##      # #
  #  #  #  #   #  #      #  #     #  #    #   #     #  #      #  #      # #   # #        # #  ##     # #
   #   #  #    #  #      #  #       #   #   #       #  #      #  #     # #     # #       # #   ##    # #
    #  # #     #  #      #  #         # # #         #  #      #  #    # # # # # # #      # #    ##   # #
     #  #      #  #      #  #       #   #   #       #  #      #  #   # #         # #     # #     ##  # #
     #  #       #  #* * *# #     #  #     #   #      # #* * *# #    # #           # #    # #      ## # #
     ####        **********    #####         #####     ********    ###             ###   ###       #####

VERSION=1.03
###======================================= check this tool ==============================================

RL=`which readlink`;

if [[ ! -x $RL ]]; then
    echo;
    echo "Please ensure 'readlink' has been set in your PATH.";
    echo >&2; exit 1;
fi

#get the absolute path of downdloadSRA

downdloadSRA=`which $0`;
if [[ -z "$downdloadSRA" ]]; then
    downdloadSRA=`$RL -f $0`;
else
    downdloadSRA=`$RL -f $(which $BASENAME$0)`;
fi

downdloadSRA_path=`dirname "$downdloadSRA"`;

if [[ "$downdloadSRA_path" == "." ]]; then
    echo;
    echo "Please give an excutive permission to `basename $0`";
    echo; exit 1;
fi

###========================================== functions ================================================

usage(){

echo "
-----------------------------------------------------------------------------------
Program:  `basename $0`
Version:  $VERSION
Author:   Yuxuan Yuan (yuxuan.yuan@outlook.com)
-----------------------------------------------------------------------------------
Synopsis: This script aims to help download NCBI SRA data with an ID specified

Usage:    `basename $0` <command> [options] 
---------------------------------------------------------------
command:  ascp       download using ascp with a high speed 
          wget       download using wget with a slow speed
---------------------------------------------------------------
options:  -h/-help   show this message
          -i         SRA id, e.g. SRR000001
          -s         if select ascp, the download speed (Mbp/s). Default is 200
          -d         dump the sra file to fastq(s) [Y/N]; Default: Y
          -o         output directory 
-----------------------------------------------------------------------------------
"
}

check_path(){
    myDir=`$RL -f $1`;
    if [[ ! -d "$myDir" ]] || [[ ! -w "$myDir" ]]; then
        echo; 
        echo "Oops! It seems the output directory is not existent or writable, please check!";
        echo; exit 1;
    fi
}

check_tool(){
    which $1 >/dev/null 2>&1;
    if [[ $? != 0 ]]; then
        echo;
        echo "Oops! '$1' is not in the PATH. Please check!";
        echo; exit 1;
    fi
    mytool=`$RL -f $(which $1)`;
    if [[ ! -s "$mytool" ]] || [[ ! -x "$mytool" ]]; then
        echo;
        echo "Oops! It seems '$1' is not executable. Please check!";
        echo; exit 1;
    fi
}

check_pylib(){
    pdlib=`python -c "import imp; imp.find_module('$1')" 2>&1 || true`
    if [[ ! -z "$pdlib" ]]; then
        echo;
        echo "Oops! It seems python library '$1' is not installed. Please check!";
        echo; exit 1;
    fi
}

function check_integer () {
    if ! [[ $1 =~ ^[0-9]+$ ]]; then
        echo
        echo "Oops! Your input '$1' is not an integer or smaller than 0. Please check!" 1>&2
        echo >&2; exit 1
    fi
}

###========================================== program ================================================
##Print help if no args input

if [[ $# -eq 0 ]]; then
    usage;
    exit 0;
fi

##Check the first arg
if [[ $1 != "ascp" ]] && [[ $1 != "wget" ]]; then
    if [[ $1 == "-h" ]] || [[ $1 == "-help" ]] || [[ $1 == "--help" ]]; then
        usage;
        exit 1;
    else
        echo -e "\nOops! Unknown command '$1'";
        echo -e "Please check '`basename $0` -h' and continue ...";
        echo; exit 1;
    fi
fi

if [[ $# == 1 ]]; then 
    usage; exit 1;
fi

if [[ $# -gt 1 ]] && [[ $1 == "ascp" || $1 == "wget" ]]; then 
    cmd=$1;
    shift;
    options=':hi:s:d:o:';
    while getopts "$options" opt; do
        case "$opt" in 
            h) usage; exit 1;;
            i) sra=${OPTARG};;
            s) spd=${OPTARG};;
            o) od=${OPTARG};;
            d) dmp=${OPTARG};;			
            \?) echo;echo -e "Oops! Unknown option '-$OPTARG'">&2; echo "Please check '`basename $0` -h' and continue..."; echo; exit 1;;
            :) echo;echo -e "Missing option argument for '-$OPTARG'. Please check!">&2; echo; exit 1;;
        esac
    done
    shift "$((OPTIND - 1))"

    if [[ -z $sra ]] || [[ -z $od ]]; then
        echo;
        echo "Some option was missing. Please check '`basename $0` -h' and continue...";
        echo; exit 1;
    fi

    ##convert to uppercase 
    sra=`echo ${sra} | tr a-z A-Z`;
    F3="${sra:0:3}";
    F6="${sra:0:6}";

    ##check -d
    if [[ -z ${dmp} ]]; then
        dmp='Y';
    else
        dmp=`echo ${dmp} | tr a-z A-Z`;
        if [[ ${dmp} != 'Y' ]] && [[ ${dmp} != 'N' ]]; then
            echo; echo "Please input 'Y' or 'N' when you select '-d' option"; echo; exit 1;
        fi
    fi					
    
    ##check -s
    if [[ -z ${spd} ]]; then
        spd=200;
    fi 

    check_integer "${spd}"

    ##Check outDir
    last_chr="${od: -1}"
    if [[ "$last_chr" == "/" ]]; then
        od="${od%?}";
    fi
    if [[ "$od" == "." ]];then
        od=$PWD;
    elif [[ ${od: -2} == ".." ]];then
        od="$PWD/$od";
    fi
    check_path "$od"; 

    #if [[ $cmd == "ascp" ]]; then
    #    $downdloadSRA_path/../tools/aspera/connect/bin/ascp -QT -l${spd}M -i $downdloadSRA_path/../tools/aspera/connect/etc/asperaweb_id_dsa.openssh \
	#	anonftp@ftp-trace.ncbi.nlm.nih.gov:/sra/sra-instant/reads/ByRun/sra/${F3}/${F6}/${sra}/${sra}.sra ${od}/.
    #else
    #    wget https://ftp-trace.ncbi.nlm.nih.gov/sra/sra-instant/reads/ByRun/sra/${F3}/${F6}/${sra}/${sra}.sra ${od}/.
    #fi
    
    # ${downdloadSRA_path}/../tools/sratoolkit/bin/prefetch -a '${downdloadSRA_path}/../tools/aspera/connect/bin/ascp|${downdloadSRA_path}/../tools/aspera/connect/etc/asperaweb_id_dsa.openssh' ${sra}

    cd ${od};
    check_tool python; check_pylib requests;
    python $downdloadSRA_path/../src/getURL.py ${sra} >> ${sra}.src;
    link=`grep "sra-download" ${sra}.src | cut -d'"' -f2 | head -n 1`;
    fname=`basename ${link}`;
    if [[ -z ${link} ]]; then 
        rm -rf ${sra}.src;				
        echo; echo "It seems there is no resource for '${sra}'. Please check!"; echo; exit 1;
    fi
    if [[ $cmd == "ascp" ]]; then
        mylink=`echo $link | cut -d"/" -f4-`
        $downdloadSRA_path/../tools/aspera/connect/bin/ascp -QT -l${spd}M -i $downdloadSRA_path/../tools/aspera/connect/etc/asperaweb_id_dsa.openssh \
        dbtest@sra-download.ncbi.nlm.nih.gov:data/sracloud/${mylink} . >/dev/null
        if [[ $? != 0 ]]; then
            echo -e "\nOops! Currently, we cannot find the correct link for 'ascp'. Now download use 'wget'!\n";
            wget ${link};
        fi     
    else
        wget ${link}; 
    fi
    if [[ $? != 0 ]]; then
        echo -e "\nOops! Something is wrong when downloading, please check!\n";
        exit 1; 
    fi
    mv ${fname} ${sra}.sra; rm -rf ${sra}.src;

    if [[ ${dmp} == 'Y' ]]; then
        cd $od;			
        $downdloadSRA_path/../tools/sratoolkit/bin/fastq-dump --split-3 ${sra}.sra;
    fi		
fi

##END SCRIPT
